class _text_show extends StatelessWidget {
  const _text_show({
    super.key,
    required this.index,
    required this.loadedMessage,
  });

  final List<QueryDocumentSnapshot<Map<String, dynamic>>> loadedMessage;
  final index;
  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        const CircleAvatar(
          radius: 20,
          //          backgroundImage: ,
          backgroundColor: Colors.redAccent,
        ),
        const SizedBox(
          width: 10,
        ),
        Text(
          loadedMessage[index].data()['text'],
          style: const TextStyle(fontSize: 18),
        )
      ],
    );
  }
}

class card_show extends StatelessWidget {
  const card_show({
    super.key,
    required this.size,
  });

  final Size size;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(15.0),
      child: Container(
        width: size.width,
        height: size.height * 0.1,
        decoration: BoxDecoration(
            color: Colors.grey.withOpacity(0.5),
            borderRadius: BorderRadius.circular(30)),
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircleAvatar(
                radius: 20,
                backgroundColor: Colors.green,
              ),
              SizedBox(
                width: 10,
              ),
              Text("User Name"),
              Spacer()
            ],
          ),
        ),
      ),
    );
  }
}




class Chat_ui extends StatelessWidget {
  const Chat_ui({
    super.key,
    required this.loadedMessage,
    required this.userAuth,
  });

  final List<QueryDocumentSnapshot<Map<String, dynamic>>> loadedMessage;
  final User userAuth;

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return ListView.builder(
        padding: const EdgeInsets.only(bottom: 40, left: 13, right: 13),
        itemCount: loadedMessage.length,
        reverse: false,
        itemBuilder: (context, index) {
          final chatMessage = loadedMessage[index].data();
          final nextChatMessage = index + 1 < loadedMessage.length
              ? loadedMessage[index + 1].data()
              : null;
          final currentMessageUserId = chatMessage['userId'];
          final nextMessageUserId =
              nextChatMessage != null ? nextChatMessage['userId'] : null;
          final nextUserIsSame = nextMessageUserId == currentMessageUserId;
          return Padding(
            padding: const EdgeInsets.only(top: 10),
            child: Container(
              width: size.width,
              height: size.height * 0.09,
              decoration: BoxDecoration(
                  color: Colors.grey.withOpacity(0.5),
                  borderRadius: BorderRadius.circular(20)),
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircleAvatar(
                      radius: 20,
                      backgroundImage: NetworkImage(chatMessage['userImage']),
                      backgroundColor: Colors.green,
                    ),
                    const SizedBox(
                      width: 10,
                    ),
                    Text(chatMessage['username']),
                    const Spacer()
                  ],
                ),
              ),
            ),
          );
        });
  }
}
